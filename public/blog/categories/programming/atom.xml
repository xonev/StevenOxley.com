<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Bytes and Bikes]]></title>
  <link href="http://www.stevenoxley.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://www.stevenoxley.com/"/>
  <updated>2020-09-03T21:57:32-07:00</updated>
  <id>http://www.stevenoxley.com/</id>
  <author>
    <name><![CDATA[Steven Oxley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Web Application Building Blocks]]></title>
    <link href="http://www.stevenoxley.com/blog/2020/07/17/clojure-web-application-building-blocks/"/>
    <updated>2020-07-17T13:43:09-07:00</updated>
    <id>http://www.stevenoxley.com/blog/2020/07/17/clojure-web-application-building-blocks</id>
    <content type="html"><![CDATA[<p>As I&rsquo;ve mentioned before, I&rsquo;m rebuilding this website using Clojure.</p>

<p>When starting a new project, I find you often have two choices: start with a batteries-included framework or build up the framework yourself from your own code and any libraries you might want to leverage. I usually choose the first when I want to get something up and running quickly. I choose the second when I want to learn as much as I can and have fun tinkering along the way.</p>

<p>This time, I am choosing to build up the framework of my application myself. In the past I have used a baterries-included web application template, <a href="https://github.com/plexus/chestnut">chestnut</a>, but this time I decided not to go that route. One reason I decided not to use chestnut is that I don&rsquo;t think I&rsquo;ll need any client-side cljs code. Chestnut&rsquo;s main use case is compiling and reloading cljs.</p>

<p>The only functionality I want in the first iteration of my framework is markdown to HTML parsing, an HTTP server to serve that HTML, and live reloading (reloading of the page when something server-side changes).</p>

<p>To support those features, I have started evaluating the libraries I want to use:</p>

<ul>
<li>These are micro-frameworks for managing dependencies, keeping things loosely coupled, and setting up a <a href="http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded">reloaded workflow</a> for development. Integrant is currently the frontrunner.

<ul>
<li><a href="https://github.com/weavejester/integrant">Integrant</a></li>
<li><a href="https://github.com/tolitius/mount">Mount</a></li>
<li><a href="https://github.com/stuartsierra/component">Component</a> &ndash; I&rsquo;ve used Component once before, but Integrant claims to solve some of the difficulties I had with Component.</li>
</ul>
</li>
<li><a href="https://github.com/ring-clojure/ring">Ring</a> &ndash; the <em>de facto</em> standard Clojure web application library.</li>
<li>I have decided to use bidi as a routing library because I don&rsquo;t like Compojure.

<ul>
<li><a href="https://github.com/juxt/bidi">bidi</a> &ndash; a routing library that just uses data structures for defining routes.</li>
<li><a href="https://github.com/weavejester/compojure">compojure</a> &ndash; a routing library which I find distasteful due to its unnecessary use of macros.</li>
</ul>
</li>
<li><a href="https://github.com/wkf/hawk">hawk</a> for watching files to kick off live reloading.</li>
</ul>


<p>I would like to keep the libraries I&rsquo;m using fairly minimal. I may add some more to this list for things like generating HTML, but I&rsquo;d like to write a quite a bit of code myself.</p>

<p>I feel good about choosing to build up the framework of my application myself. Getting to know each piece may help me develop the application even more quickly in the long run.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Markdown Parsing Benchmarks]]></title>
    <link href="http://www.stevenoxley.com/blog/2020/07/13/clojure-markdown-parsing-benchmarks/"/>
    <updated>2020-07-13T10:45:32-07:00</updated>
    <id>http://www.stevenoxley.com/blog/2020/07/13/clojure-markdown-parsing-benchmarks</id>
    <content type="html"><![CDATA[<p>I am working on setting up a new system for publishing content. I have a few different categories of content that I&rsquo;m interested in creating. I&rsquo;ll have to determine exactly what the taxonomy will be, but the broad categories will probably be computers, mountain biking, and more personal stuff including relationships and religion. The first step towards this new system is just to replace the technology behind this website.</p>

<p>This website is currently generated statically using a very old version of <a href="https://jekyllrb.com/">jekyll</a>/<a href="http://octopress.org/">octopress</a>. Static site generation is really nice, but I think I&rsquo;m going to want to add some more interactive features like small applications. Therefore, I decided to replace this static site generation approach with a Clojure application.</p>

<p>Since these posts currently are all written in markdown and then parsed and rendered into HTML before being served statically via nginx, I wanted to check to see how expensive it would be to parse and render the markdown into HTML on every page load. To evaluate, I used a couple of handy Clojure libraries &ndash; <a href="https://github.com/yogthos/markdown-clj">markdown-clj</a> and <a href="https://github.com/hugoduncan/criterium/">criterium</a>. Using <code>markdown-clj</code> it was fairly trivial to replicate the functionality of the markdown processing of octopress. It is even has the ablility to parse the metadata at the top of the markdown files. For example, this is the metadata that I have at the top of this post:</p>

<h2>```</h2>

<p>layout: post
title: &ldquo;Clojure Markdown Parsing Benchmarks&rdquo;
date: 2020-07-13 10:45:32 -0700
comments: true</p>

<h2>categories: clojure programming</h2>

<p>```</p>

<p>To parse that metadata, I simply had to pass in the <code>:parse-meta? true</code> option when parsing, like this:</p>

<p><code>
(md/md-to-html file-name writer :parse-meta? true :reference-links? true)
</code></p>

<p>Then the metadata is parsed nicely into a map for me:</p>

<p><code>
:metadata #ordered/map ([:layout "post"] [:title "Clojure Markdown Parsing Benchmarks"] [:date "2020-07-13 10:45:32 -0700"] [:comments true] [:categories "clojure programming"])
</code></p>

<p>You can see more detail in the source code <a href="https://github.com/xonev/the-archive/blob/4fbdbcc8f08386a9ef893a21d69c2b74385c5ecf/websites/src/websites/markdown.clj">on github</a>.</p>

<p>Finally, I created an uberjar using <code>lein uberjar</code>, uploaded it to the DigitalOcean machine I intend to use, and ran the benchmark using criterium:</p>

<p><code>
(crit/with-progress-reporting (crit/bench (md/parse-post "posts/2012-03-13-on-the-uncertainty-of-everything.md") :verbose))
</code></p>

<p>Because of <a href="https://github.com/hugoduncan/criterium/issues/41">this issue</a>, I also had to call <code>flush</code> afterwards to get the output to display correctly. Again, you can see more detail <a href="https://github.com/xonev/the-archive/blob/4fbdbcc8f08386a9ef893a21d69c2b74385c5ecf/websites/src/websites/core.clj">on github</a>.</p>

<p>Once I ran the benchmark, criterium gave me some useful results:</p>

<p>```
Evaluation count : 3240 in 60 samples of 54 calls.</p>

<pre><code>  Execution time sample mean : 19.447409 ms
         Execution time mean : 19.449686 ms
</code></pre>

<p>Execution time sample std-deviation : 909.567764 µs</p>

<pre><code>Execution time std-deviation : 928.443124 µs
</code></pre>

<p>   Execution time lower quantile : 18.431349 ms ( 2.5%)
   Execution time upper quantile : 21.718663 ms (97.5%)</p>

<pre><code>               Overhead used : 2.936410 ns
</code></pre>

<p>Found 5 outliers in 60 samples (8.3333 %)</p>

<pre><code>    low-severe       4 (6.6667 %)
    low-mild         1 (1.6667 %)
</code></pre>

<p> Variance from outliers : 33.6000 % Variance is moderately inflated by outliers
```</p>

<p>I can see there that it takes about 20ms to parse a typical markdown file for one of my blog posts. That would mean that, ignoring other overhead for serving a webpage, I could serve about 50 pages per second. That seems more than acceptable for the amount of traffic I expect to receive on this blog.</p>
]]></content>
  </entry>
  
</feed>
